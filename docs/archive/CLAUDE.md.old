# Claude Instructions for GS-CMS Enterprise Project

## Project Overview
Building a modern Customer Relationship & Quote Management System (CMS) using Next.js, React, TypeScript, and PostgreSQL. This system manages the complete workflow from customer inquiries through production orders, with a sophisticated role-based assignment system.

## üöÄ Current Project Status (Last Updated: 2025-01-25)
- ‚úÖ **Production Deployed**: Successfully running on Vercel
- ‚úÖ **All Technical Debt Resolved**: No pending fixes or errors
- ‚úÖ **Infrastructure Complete**: Docker, CI/CD, and documentation ready
- üîÑ **Ready for Feature Development**: Focus on pending features below

## üìã Quick Start for Continuing Session
1. **Check deployment**: Application is live on Vercel
2. **Review pending tasks**: See TODO section at bottom
3. **Run locally**: `npm install && npm run dev`
4. **Database**: Already configured with indexes and caching
5. **Recent work**: Fixed all deployment issues, added Docker & CI/CD

## Core Business Context
1. **Sales** creates inquiries with multiple items from customers
2. **VPP (VP Production)** assigns inquiry items to VPs with workload balancing
3. **VPs** calculate production costs and assign technical tasks to Tech Officers
4. **Managers** approve production costs with oversight
5. **Sales** applies margins and generates quotes
6. **System** converts approved quotes to production orders

## Technical Stack
- **Frontend**: Next.js 15 (App Router), React 19, TypeScript, TailwindCSS, shadcn/ui
- **Backend**: Next.js API Routes, Prisma ORM
- **Database**: PostgreSQL with performance indexes
- **Auth**: NextAuth.js v5 with role-based permissions
- **Cache**: Redis (optional with in-memory fallback)
- **State**: React Query (TanStack Query)
- **Real-time**: WebSocket notifications
- **File Storage**: UploadThing
- **Deployment**: Vercel (production), Docker (available)
- **CI/CD**: GitHub Actions configured

## User Roles & Permissions Matrix
```
Superuser: Full system access
Admin: User management, system configuration
Manager: Approvals, reporting, oversight
Sales: Inquiry creation, pricing, quotes
VPP: Item assignment to VPs
VP: Cost calculations, tech assignments
Tech: Technical analysis, documentation
```

## Development Guidelines

### 1. Code Organization
- Use feature-based folder structure
- Separate concerns: UI, business logic, data access
- Implement proper error boundaries
- Use React Server Components where possible

### 2. Type Safety
- Define strict TypeScript interfaces for all entities
- Use Zod for runtime validation
- Maintain type consistency across client-server boundaries
- Never use `any` type without explicit justification

### 3. Security First
- Always check user permissions in API routes
- Use parameterized queries (Prisma handles this)
- Sanitize all user inputs
- Implement proper CORS policies
- Never expose sensitive data in client-side code

### 4. Performance Optimization
- Implement pagination for all list views
- Use React.memo for expensive components
- Optimize database queries with proper indexes
- Implement caching strategies with React Query
- Use dynamic imports for code splitting

### 5. UI/UX Standards
- Mobile-first responsive design
- Loading states for all async operations
- Proper error messages (user-friendly)
- Consistent spacing and typography (via Tailwind)
- Accessibility compliance (WCAG 2.1)

### 6. Business Logic Rules
- VPP can only assign to active VPs
- Cost calculations require all fields completed
- Managers must approve costs over threshold
- Quotes expire after validity period
- All actions create audit log entries

### 7. Database Patterns
- Use transactions for multi-table operations
- Implement soft deletes (isActive flags)
- Maintain referential integrity
- Index frequently queried fields
- Use JSON fields for flexible data

### 8. Testing Requirements
- Unit tests for business logic
- Integration tests for API routes
- E2E tests for critical workflows
- Test all user role scenarios
- Maintain >80% code coverage

## Context7 Integration Points
1. **Entity Relationships**: Track all Prisma model connections
2. **Workflow States**: Monitor business process flows
3. **Permission Checks**: Ensure consistent auth patterns
4. **Component Dependencies**: Track UI component usage
5. **API Contracts**: Maintain endpoint documentation

## Common Patterns

### API Route Pattern
```typescript
export async function GET(request: NextRequest) {
  // 1. Auth check
  const session = await getServerSession(authOptions)
  if (!session) return unauthorized()
  
  // 2. Permission check
  if (!hasPermission(session.user, 'resource:read')) {
    return forbidden()
  }
  
  // 3. Validate inputs
  const { searchParams } = new URL(request.url)
  const validated = schema.parse(Object.fromEntries(searchParams))
  
  // 4. Business logic
  try {
    const data = await prisma.resource.findMany({...})
    return NextResponse.json(data)
  } catch (error) {
    return serverError(error)
  }
}
```

### Component Pattern
```typescript
interface Props {
  data: EntityType
  onAction: (id: string) => Promise<void>
}

export function Component({ data, onAction }: Props) {
  const [isLoading, setIsLoading] = useState(false)
  
  const handleAction = async () => {
    setIsLoading(true)
    try {
      await onAction(data.id)
      toast.success('Action completed')
    } catch (error) {
      toast.error('Action failed')
    } finally {
      setIsLoading(false)
    }
  }
  
  return (
    <Card>
      {/* Component UI */}
    </Card>
  )
}
```

## MCP Serene Usage
- Enable for TypeScript completions
- Configure for Prisma schema awareness
- Use for React component suggestions
- Leverage for API route patterns
- Activate for business logic helpers
- Use MCP SELENE properly
- Use MCP Serene properly

## Sprint Methodology
- 2-week sprints with clear deliverables
- Daily progress updates in SPRINTS.md
- Feature branches with PR reviews
- Continuous deployment to preview
- Production releases at sprint end

## Error Handling Strategy
1. Catch errors at appropriate levels
2. Log technical details to server
3. Show user-friendly messages
4. Provide actionable next steps
5. Track error patterns for fixes

## Development Best Practices
- When dealing with server issues, especially port where they run, NEVER assume!
- Use detailed debugging and all available app logs when we have a persistent issue

## Environment Configuration Notes
- Make sure remote setup stays untouched. for local development use local redis and local db. ignore earlier instructions about using remote db and redis!

## Remember
- Business value over technical perfection
- User experience is paramount
- Security cannot be compromised
- Performance impacts user adoption
- Documentation enables maintenance

When uncertain, ask for clarification rather than making assumptions about business requirements.

## ‚úÖ Recently Completed
1. **Workflow Automation** (Completed: 2025-01-25)
   - ‚úÖ Automated task assignments with workload balancing
   - ‚úÖ Email notifications with template system
   - ‚úÖ Deadline tracking with reminders and escalations
   - ‚úÖ Full UI for rule configuration
   - ‚úÖ 9 triggers and 9 action types implemented
   - ‚úÖ Cron job scheduler for background tasks

2. **User Management System** (Completed: 2025-01-25)
   - ‚úÖ Fixed all 500 errors (user creation, password reset, edit functionality)
   - ‚úÖ Copy-to-clipboard functionality for temporary passwords
   - ‚úÖ Enhanced edit dialog with proper state management
   - ‚úÖ Next.js 15 compatibility (async route parameters)
   - ‚úÖ Robust audit logging with foreign key constraint handling
   - ‚úÖ Extended notification durations (15-20 seconds)
   - ‚úÖ Database persistence verification and troubleshooting

3. **Business Partners Management** (Completed: 2025-07-25)
   - ‚úÖ New `business_partners` table in database schema
   - ‚úÖ Imported 66 business partners from CSV file
   - ‚úÖ Full CRUD API endpoints (`/api/business-partners`)
   - ‚úÖ Proper authentication and authorization
   - ‚úÖ Search, filtering, and pagination support
   - ‚úÖ Import/export scripts for data management
   - ‚úÖ Unique name validation and soft delete functionality

3. **User Management System Enhancement** (Completed: 2025-07-25)
   - ‚úÖ Fixed 500 errors in user creation API
   - ‚úÖ Implemented proper bcrypt password hashing
   - ‚úÖ Enhanced authentication with NextAuth.js
   - ‚úÖ Complete role-based permission system
   - ‚úÖ Password reset functionality with temporary passwords
   - ‚úÖ Improved notifications showing temp passwords
   - ‚úÖ User edit, activate/deactivate functionality
   - ‚úÖ Self-protection preventing users from breaking their access
   - ‚úÖ Comprehensive audit logging for user operations

## üìù TODO: Pending Features
1. **WebSocket Implementation** (Priority: High)
   - Implement proper WebSocket server for production
   - Options: Socket.io, ws library, or managed service (Pusher/Ably)
   - Real-time notifications for all user actions
   - Connection state management and reconnection logic
   - Currently disabled due to placeholder implementation

2. **Advanced Reporting** (Priority: High)
   - Custom report builder interface
   - Scheduled report generation
   - Export to multiple formats
   - Performance metrics dashboard

3. **Dark Mode Theme** (Priority: Low)
   - Theme context provider
   - CSS variable switching
   - User preference persistence
   - Smooth transitions

## üîß Known Issues & Solutions
- **Login Issues**: Database needs initialization - run `npx prisma db push && npm run db:seed`
- **Redis Optional**: System falls back to in-memory if Redis unavailable
- **Edge Runtime**: Middleware uses in-memory rate limiting for compatibility
- **WebSocket Errors**: Currently disabled - `/api/ws` endpoint returns 501. Real-time notifications not functional until proper WebSocket server implemented

## üìÅ Key Files for Reference
- `/src/app/` - Next.js 15 app directory structure
- `/src/components/` - Reusable UI components
- `/src/lib/` - Utilities, auth, database configs
- `/src/lib/automation/` - Workflow automation engine
- `/prisma/schema.prisma` - Database schema (includes automation models)
- `/.github/workflows/` - CI/CD pipelines
- `/docs/README.md` - Documentation hub
- `/docs/deployment/DEPLOYMENT.md` - Deployment instructions
- `/PROJECT_SUMMARY.md` - Complete project overview
- `/docs/features/AUTOMATION_FEATURE.md` - Workflow automation documentation

## Urgent Technical Instructions

### Critical i18n Handling
- URGENT: Find and fix critical i18n bug: [describe issue]. 
- Priority: Production hotfix needed.
- Scope: Minimal code changes, maximum compatibility.
- Test: Verify fix doesn't break existing functionality.
- Document: Log exact changes made for review.

## Tool Selection Notes
- CRITICAL dont use Playwright in this project. Use Puppeteer MCP